//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Modnote.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Modnote.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CODE
        ///CGP1005M
        ///TITLE
        ///Game Design 1
        ///SYNOPSIS
        ///This module explores games as products of a design process, centred on how the mechanics of a game shape the experience of the players. There is a strong focus on practical work and experimentation, to get a first-hand understanding of how the components of a game work together and the effects of various changes in context.
        ///LO 
        ///LO1 Recognise the relationship between game mechanics and gameplay experience
        ///LO2 Analyse the architecture, design and underlying p [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CGP1005M {
            get {
                return ResourceManager.GetString("CGP1005M", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CODE
        ///CMP1005M
        ///TITLE
        ///Operating Systems
        ///SYNOPSIS
        ///This module studies both the theoretical design concepts which underpin all operating systems and, through case-studies, the practical implementation techniques of current operating systems. Special attention will be given to shell programming languages and examples to practically implement concepts and techniques at the basis of the various operating systems        ///.        ///
        ///LO
        ///LO1 Outline and discuss mechanics and strategies within operating system architectures
        ///LO [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CMP1005M {
            get {
                return ResourceManager.GetString("CMP1005M", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CODE
        ///CMP1123M
        ///TITLE
        ///Information Systems in Practice
        ///SYNOPSIS
        ///This module explores the manifestation of Information Systems (IS) in practical situations. It develops an understanding about the structure and scope of IS and explores the shared characteristics which make up IS in practice.
        ///LO 
        ///LO1 Explain the role and action of an Information System in facilitating functional operations
        ///LO2 Describe approaches which deliver compliance to the ethical, legal, moral and security constraints placed upon In [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CMP1123M {
            get {
                return ResourceManager.GetString("CMP1123M", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CODE
        ///CMP1124M
        ///TITLE
        ///Algorithms and Complexity
        ///SYNOPSIS
        ///The module introduces the concepts of Algorithms and Complexity, providing an understanding of the range of applications where algorithmic solutions are required. Students will be introduced to the analysis of time and space efficiency of algorithms; to the key issues in algorithm design; to the range of techniques used in the design of various types of algorithms. Students will be introduced to relevant theoretical concepts around algorithms and c [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CMP1124M {
            get {
                return ResourceManager.GetString("CMP1124M", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CODE
        ///CMP1125M
        ///TITLE
        ///Computer Architectures
        ///SYNOPSIS
        ///This module introduces the fundamentals of computer hardware underpinning the key aspects of Computer Science. This knowledge is not only essential for deeper understanding of the governing processes behind computing but also for realising how hardware interacts with software.
        ///LO 
        ///LO1 demonstrate an understanding of fundamentals underpinning modern computer architectures.
        ///LO2 review and compare different models and processes used in modern computer [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CMP1125M {
            get {
                return ResourceManager.GetString("CMP1125M", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CODE
        ///CMP1127M
        ///TITLE
        ///Programming and Data Structures
        ///SYNOPSIS
        ///This module introduces the concepts and practice of simple computer programming, with attention paid to the fundamentals that constitute a complete computer program including layout, structure and functionality. The module extends students&apos; knowledge of computer programming and introduces them to fundamental computing data structures allowing the representation of data in computer programs.        ///
        ///LO
        ///LO1 identify the properties of common data str [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CMP1127M {
            get {
                return ResourceManager.GetString("CMP1127M", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CODE
        ///CMP1129M
        ///TITLE
        ///Web Applications Development
        ///SYNOPSIS
        ///This module provides students with the knowledge to design and develop client-server web technologies. Students will learn key concepts on constructing and deploying server side code, including database and application programmable interface (API) connectivity as well as industry standard communication protocols such as REST and SOAP.
        ///LO 
        ///LO1 understand the strengths and weaknesses of current web communication protocols
        ///LO2 design and impleme [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CMP1129M {
            get {
                return ResourceManager.GetString("CMP1129M", resourceCulture);
            }
        }
    }
}
